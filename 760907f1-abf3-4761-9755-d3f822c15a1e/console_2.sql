drop schema if exists inher cascade;
create schema if not exists inher;

create table if not exists inher.d_node_type
(
    node_type_id   int4 not null
        constraint event_type_pk primary key,
    node_type_name text,
    created_on      timestamptz default clock_timestamp()
);
comment on table inher.d_node_type is 'Types of event and\or participants';


create table if not exists inher.d_participant
(
    participant_id   int4 not null
        constraint participant_pk primary key generated by default as identity,
    participant_name text,
    event_type_id    int4
        constraint participant_event_fk references inher.d_node_type (node_type_id),
    created_on       timestamptz default clock_timestamp()
);
comment on table inher.d_participant is 'All partitcipants of this story: it can be people, events, or something else that triggered another smth';


create table if not exists inher.f_edge
(
    edge_id     int4 not null
        constraint edge_pk primary key generated by default as identity,
    parent_id   int4 not null
        constraint edge_parent_fk references inher.d_participant (participant_id),
    child_id    int4 not null
        constraint edge_child_fk references inher.d_participant (participant_id),
    edge_date   date,
    edge_memory text,
    created_on  timestamptz default clock_timestamp()
);
comment on table inher.f_edge is 'Connections between two participants';


create table if not exists inher.f_consequence
(
    consequence_id          int4 not null
        constraint consequence_pk primary key generated by default as identity,
    consequence_description text,
    edge_id                 int4
        constraint consequence_edge_fk references inher.f_edge (edge_id),
    created_on              timestamptz default clock_timestamp()
);
comment on table inher.f_consequence is 'Things, emotions, experience etc that became concequence of the event';


