select array_agg(id)
from (select distinct dataset_id as id
      from dwh.execution
      where exec_date_id = 20240308
      order by 1
      limit 20 offset 0) x

select * from data_marts.f_parent_order;

drop table if exists data_marts.f_parent_order;
create table data_marts.f_parent_order
(
    parent_order_id     int8      not null,
    last_exec_id        int8,
    create_date_id      int4      not null,
    status_date_id      int4,
    time_in_force_id    bpchar(1),
    account_id          int4
        constraint f_parent_order_d_account_fk references dwh.d_account (account_id),
    trading_firm_unq_id int4
--         constraint f_parent_order_d_trading_firm_fk references dwh.d_trading_firm (trading_firm_unq_id)
,
    instrument_id       int4
        constraint f_parent_order_d_instrument_fk references dwh.d_instrument (instrument_id),
    instrument_type_id  bpchar(1),
    street_count        int4,
    trade_count         int4,
    order_qty           int4,
    street_order_qty    int4, --sum order_qty streets
    last_qty            int8, -- sum last_qty exec
    amount              numeric, -- last_qty * price
    pg_db_create_time   timestamp not null default clock_timestamp(),
    pg_db_update_time   timestamp
--     process_time
);
alter table data_marts.f_parent_order set (fillfactor = 50);
alter table data_marts.f_parent_order add constraint f_parent_order_pk primary key (status_date_id, parent_order_id);

comment on table data_marts.f_parent_order is 'data mart for parent_orders incrementally updating during the market day';
comment on column data_marts.f_parent_order.parent_order_id is 'parent_order from dwh.client_order';
comment on column data_marts.f_parent_order.create_date_id is 'create_date_id for parent_order';
comment on column data_marts.f_parent_order.last_exec_id is 'last processed exec_id to info';
comment on column data_marts.f_parent_order.status_date_id is 'date_id of the day where parent_order was processed into the table. As sama as create_date_id for non GTC orders';
comment on column data_marts.f_parent_order.time_in_force_id is 'time_in_force_id of parent_order';
comment on column data_marts.f_parent_order.account_id is 'account_id of parent_order related to d_account';
comment on column data_marts.f_parent_order.trading_firm_unq_id is 'trading_firm_unq_id of parent_order related to d_trading_firm';
comment on column data_marts.f_parent_order.instrument_id is 'instrument_id of parent_order related to d_instrument';
comment on column data_marts.f_parent_order.instrument_type_id is 'instrument_type_id of parent_order';
comment on column data_marts.f_parent_order.pg_db_create_time is '';
comment on column data_marts.f_parent_order.pg_db_update_time is '';


select * from staging.f_parent_order_last_subscription
create table staging.f_parent_order_last_subscription
(
    date_id       int4,
    load_batch_id int8
);
comment on table staging.f_parent_order_last_subscription is 'Auxillary table for counting the last processed subscription until the permanent process of running has invented';

select * from data_marts.run_f_parent_order_process();

create or replace function data_marts.run_f_parent_order_process()
    returns int4
    language plpgsql
as
$$
declare
    l_load_batch_ids int8[];
    l_length         int4;
    l_date_id        int4 := to_char(current_date, 'YYYYMMDD')::int4;
begin
    select array_agg(load_batch_id order by load_batch_id)
    into l_load_batch_ids
    from public.etl_subscriptions
    where load_batch_id > coalesce((select load_batch_id
                           from staging.f_parent_order_last_subscription
                           where date_id = l_date_id
                           limit 1), 0)
      and source_table_name = 'execution'
      and subscription_name = 'main_job';

    select array_length(l_load_batch_ids, 1) into l_length;

    perform data_marts.load_parent_order_inc3(
            in_date_id := l_date_id,
            in_dataset_ids := l_load_batch_ids);

    update staging.f_parent_order_last_subscription
    set date_id       = l_date_id,
        load_batch_id = l_load_batch_ids[l_length]
    where true;

    return l_length;
end;
$$;


select *--(array_agg(load_batch_id order by load_batch_id))[1190] --- 36479240
from public.etl_subscriptions
where true
and source_table_name = 'execution'
-- and subscription_name = 'main_job'
and to_char(subscribe_time, 'YYYYMMDD')::int4 = 20240320

alter table data_marts.f_parent_order add column side bpchar(1);
alter table data_marts.f_parent_order add column leaves_qty int8;


create or replace function data_marts.load_parent_order_inc3(in_parent_order_ids bigint[] default null::bigint[],
                                                             in_date_id integer default null::integer,
                                                             in_dataset_ids bigint[] default null::bigint[])
    returns integer
    language plpgsql
as
$function$
    -- SO: 20240307 https://dashfinancial.atlassian.net/browse/DS-8065
declare
    l_row_cnt int4;
    l_load_id int8;
    l_step_id int4;
    l_date_id int4 := coalesce(in_date_id, to_char(current_date, 'YYYYMMDD')::int4);

begin

    select nextval('public.load_timing_seq') into l_load_id;
    l_step_id := 1;
    select public.load_log(l_load_id, l_step_id,
                           'load_parent_order_inc for ' || l_date_id::text || ' STARTED ===', 0, 'O')
    into l_step_id;

    --     raise notice '%, %, %', in_parent_order_ids, in_dataset_ids, in_date_id;

    -- the list of orders with permanent attributes
    drop table if exists t_base;
    create temp table t_base as
    select cl.parent_order_id,
           min(par.create_date_id)      as create_date_id,
           min(exec_id)                 as min_exec_id,
           max(exec_id)                 as max_exec_id,
           min(par.time_in_force_id)    as time_in_force_id,
           min(par.account_id)          as account_id,
           min(par.instrument_id)       as instrument_id,
           min(par.instrument_type_id)  as instrument_type_id,
           min(par.trading_firm_unq_id) as trading_firm_unq_id,
           min(par.order_qty)           as parent_order_qty,
           min(par.side)                as side
    from dwh.execution ex
             join dwh.client_order cl on cl.order_id = ex.order_id and cl.create_date_id = ex.order_create_date_id
             join lateral (select par.create_date_id,
                                  par.time_in_force_id,
                                  par.account_id,
                                  par.instrument_id,
                                  di.instrument_type_id,
                                  par.trading_firm_unq_id,
                                  par.order_qty,
                                  par.side
                           from dwh.client_order par
                                    join dwh.d_instrument di on di.instrument_id = par.instrument_id and di.is_active
                           where par.order_id = cl.parent_order_id
                           limit 1) par on true
    where exec_date_id = l_date_id
      and case when in_dataset_ids is null then true else ex.dataset_id = any (in_dataset_ids) end
      and case when in_parent_order_ids is null then true else cl.parent_order_id = any (in_parent_order_ids) end
      and not is_parent_level
      and ex.exec_type in ('F', '0', 'W')
      and cl.parent_order_id is not null
    group by cl.parent_order_id;

    get diagnostics l_row_cnt = row_count;
    raise notice 't_base - %', l_row_cnt;

    -- new groupped by parent_order
    drop table if exists t_parent_orders;
    create temp table t_parent_orders as
    select bs.*,
           val.*,
           nup.need_update
    from t_base bs
             --              join lateral ( select case
--                                        when exists (select null
--                                                     from data_marts.f_parent_order fp
--                                                     where fp.status_date_id = l_date_id
--                                                       and fp.parent_order_id = bs.parent_order_id
--                                                       and fp.last_exec_id > bs.min_exec_id)
--                                            then true
--                                        else false end as need_update
--         ) nup on true
             join lateral (select true as need_update) nup on true
             join lateral (select street_count, trade_count, last_qty, amount, street_order_qty, leaves_qty
                           from data_marts.get_exec_for_parent_order(in_parent_order_id := bs.parent_order_id,
                                                                     in_date_id := l_date_id,
                                                                     in_min_exec_id := case when nup.need_update then 0 else bs.min_exec_id end,
                                                                     in_max_exec_id := bs.max_exec_id
                                )
                           limit 1) val on true;

    get diagnostics l_row_cnt = row_count;
    raise notice 't_street_orders create - %', l_row_cnt;
    create index on t_parent_orders (parent_order_id);

    insert into data_marts.f_parent_order (parent_order_id, last_exec_id, create_date_id, status_date_id,
                                           street_count, trade_count, last_qty, amount, street_order_qty,
                                           leaves_qty,
                                           pg_db_create_time,
                                           order_qty,
                                           time_in_force_id, account_id, trading_firm_unq_id, instrument_id,
                                           instrument_type_id, side)
    select tp.parent_order_id,
           tp.max_exec_id,
           tp.create_date_id,
           l_date_id,
           case when tp.need_update then tp.street_count else tp.street_count + coalesce(fp.street_count, 0) end,
           case when tp.need_update then tp.trade_count else tp.trade_count + coalesce(fp.trade_count, 0) end,
           case when tp.need_update then tp.last_qty else tp.last_qty + coalesce(fp.last_qty, 0) end,
           case when tp.need_update then tp.amount else tp.amount + coalesce(fp.amount, 0) end,
           case when tp.need_update then tp.street_order_qty else tp.amount + coalesce(fp.street_order_qty, 0) end,
           case when tp.need_update then tp.leaves_qty else tp.leaves_qty + coalesce(fp.leaves_qty, 0) end,
           clock_timestamp(),
           --
           tp.parent_order_qty,
           tp.time_in_force_id,
           tp.account_id,
           tp.trading_firm_unq_id,
           tp.instrument_id,
           tp.instrument_type_id,
           tp.side
    from t_parent_orders tp
             left join data_marts.f_parent_order fp
                       on fp.parent_order_id = tp.parent_order_id and fp.status_date_id = l_date_id
    on conflict (status_date_id, parent_order_id) do update
        set last_exec_id      = excluded.last_exec_id,
            street_count      = excluded.street_count,
            trade_count       = excluded.trade_count,
            last_qty          = excluded.last_qty,
            amount            = excluded.amount,
            street_order_qty  = excluded.street_order_qty,
            pg_db_update_time = clock_timestamp()
--     and hash ???
    ;

    get diagnostics l_row_cnt = row_count;
    raise notice 't_parent_orders insert - %', l_row_cnt;

    select nextval('public.load_timing_seq') into l_load_id;
    l_step_id := 1;
    select public.load_log(l_load_id, l_step_id,
                           'load_parent_order_inc for ' || l_date_id::text || ' FINISHED ===', l_row_cnt, 'E')
    into l_step_id;

    return l_row_cnt;
end;
$function$
;


drop function if exists data_marts.get_exec_for_parent_order;
create function data_marts.get_exec_for_parent_order(in_parent_order_id bigint,
                                                     in_date_id integer DEFAULT (to_char((CURRENT_DATE)::timestamp with time zone, 'YYYYMMDD'::text))::integer,
                                                     in_min_exec_id bigint DEFAULT NULL::bigint,
                                                     in_max_exec_id bigint DEFAULT NULL::bigint)
    RETURNS TABLE
            (
                street_count     bigint,
                trade_count      bigint,
                last_qty         numeric,
                amount           numeric,
                street_order_qty integer,
                leaves_qty       numeric
            )
    LANGUAGE plpgsql
AS
$function$
declare

begin
    return query
        select count(distinct case when ex.exec_type in ('0', 'W') then ex.order_id end)    as street_count,
               count(case when ex.exec_type = 'F' then 1 end)                               as trade_count,
               sum(case when ex.exec_type = 'F' then ex.last_qty else 0 end)                as last_qty,
               sum(case when ex.exec_type = 'F' then ex.last_qty * ex.last_px else 0 end)   as amount,
               sum(case when ex.exec_type in ('0', 'W') then ex.order_qty else 0 end)::int4 as street_order_qty,
               sum(case when ex.exec_type = 'F' then ex.leaves_qty else 0 end)              as leaves_qty
        from (select distinct on (ex.order_id, ex.exec_type) cl.order_id,
                                                             cl.order_qty,
                                                             ex.exec_type,
                                                             ex.last_qty,
                                                             ex.last_px,
                                                             ex.leaves_qty
              from dwh.execution ex
                       join dwh.client_order cl on cl.order_id = ex.order_id and cl.create_date_id = in_date_id
              where ex.exec_date_id = in_date_id
                and cl.parent_order_id = in_parent_order_id
                and ex.exec_id between in_min_exec_id and in_max_exec_id
                and ex.exec_type in ('F', '0', 'W')
                and cl.trans_type <> 'F'
                and ex.is_busted = 'N') ex;
end;
$function$
;


select * from data_marts.load_parent_order_inc3(in_date_id := 20240308), in_dataset_ids := '{}');

select * from data_marts.load_parent_order_inc2(in_date_id := 20240308), in_parent_order_ids := '{284736457}');



select *
 into trash.so_parent_orders_1
-- delete
from data_marts.f_parent_order
         where true
               and parent_order_id = 284719151
    and status_date_id = 20240308;


select parent_order_id, street_count, trade_count, last_qty, amount
from trash.so_parent_orders_1
where parent_order_id = 284721580

select parent_order_id, street_count, trade_count, last_qty, amount
from data_marts.f_parent_order
where parent_order_id = 284721580
and status_date_id = 20240308
union all
select parent_order_id, street_count, trade_count, last_qty, amount
from trash.so_parent_orders_2
where parent_order_id = 284721580;


select * from dwh.client_order where parent_order_id = 284721580;

select count(distinct ex.order_id)   as street_count,
               count(*)                      as trade_count,
               sum(ex.last_qty)              as last_qty,
               sum(ex.last_qty * ex.last_px) as amount
--select      distinct cl.dataset_id
-- select *
from dwh.execution ex
         join dwh.client_order cl on cl.order_id = ex.order_id
where cl.parent_order_id = 284702110
          and ex.exec_type = 'F'
          and ex.is_busted = 'N'
and ex.dataset_id = any('{35835724,35835733,35836377,35836386,35836395,35836414,35836434,35836873,35836893,35836912,35836932,35836941,35836953,35837068,35837080,35837096,35837105,35837117,35837136,35837147,35837165,35837177,35837194,35837205,35837223,35837235,35837244,35837252,35837273,35837282,35837379,35837400,35838393,35838406,35838416,35838425,35838437,35838456,35838507,35838528,35838590,35838608,35838882,35839586,35839599,35839608,35839618,35839630,35839648,35840974,35840987,35841005,35841100,35841114,35841123,35841132,35841140,35841163,35841523,35841546,35841862,35841885,35841894,35841903,35842516,35842533,35842547,35842737,35842759,35842768,35842793,35842825,35842834,35842843,35842866,35842889,35842898,35842907,35842921,35842954,35842972,35843018,35843036,35843050,35843173,35843186,35843299,35843313,35843322,35843331,35843345,35843377,35843395,35843662,35843684,35843694,35843706,35843726,35843750,35843831,35843845,35843863,35843981,35843990,35843998,35844059,35844076,35845325,35845343,35847970,35848037,35848047,35848117,35848126,35848159,35848195,35848275,35848285,35848354,35848384,35848432,35848442,35848458,35848513,35848539,35848594,35848603,35848672,35848695,35848751,35848774,35848831,35848848,35848908,35848917,35848926,35848986,35848995,35849005,35849065,35849074,35849083,35849144,35849153,35849162,35849222,35849231,35849240,35849298,35849309,35849318,35849387,35849396,35849465,35849484,35849544,35849566,35849623,35849646,35849702,35849725,35849781,35849799,35849859,35849878,35849938,35849947,35849957,35850017,35850095,35850113,35850174,35850183,35850192,35850252,35850271,35850330,35850339,35850349,35850409,35850418,35850428,35850487,35850497,35850566,35850575,35850584,35850644,35850655,35850664,35850724,35850734,35850743,35850804,35850813,35850823,35850883,35850893,35850962,35850971,35851040,35851050,35851059,35851119,35851128,35851197,35851207,35851216,35851276,35851285,35851294,35851315,35851363,35851381,35851440,35851459,35851517,35851535,35851595,35851603,35851612,35851672,35851681,35851758,35851780,35851837,35851855,35851914,35851924,35851993,35852012,35852071,35852091,35852150,35852169,35852228,35852247,35852307,35852325,35852464,35852474,35852484,35852544,35852553,35852563,35852623,35852633,35852642,35852702,35852711,35852720,35852780,35852789,35852798,35852858,35852867,35852927,35852945,35852978,35853026,35853048,35853104,35853129,35853184,35853193,35853264,35853274,35853342,35853352,35853421,35853446,35853500,35853529,35853585,35853603,35853663,35853671,35853681,35853742,35853752,35853762,35853823,35853832,35853842,35853902,35853912,35853922,35853983,35854001,35854062,35854071,35854081,35854143,35854152,35854161,35854222,35854232,35854241,35854303,35854312,35854322,35854382,35854392,35854401,35854462,35854472,35854482,35854542,35854552,35854561,35854622,35854632,35854642,35854702,35854712,35854721,35854782,35854791,35854801,35854861,35854870,35854880,35854942,35854951,35854961,35855022,35855031,35855041,35855102,35855111,35855120,35855181,35855190,35855200,35855262,35855271,35855281,35855344,35855363,35855424,35855442,35855503,35855583,35855601,35855662,35855672,35855681,35855761,35855823,35855832,35855842,35855903,35855922,35855985,35855994,35856003,35856064,35856074,35856084,35856145,35856155,35856164,35856225,35856234,35856243,35856304,35856313,35856323,35856384,35856393,35856402,35856463,35856474,35856484,35856549,35856558,35856581,35856629,35856639,35856678,35856711,35856721,35856782,35856791,35856801,35856863,35856871,35856881,35856942,35856952,35856962,35857023,35857032,35857041,35857103,35857112,35857122,35857183,35857192,35857201,35857262,35857272,35857281,35857342,35857352,35857361,35857422,35857432,35857441,35857503,35857512,35857521,35857583,35857592,35857602,35857663,35857673,35857683,35857744,35857754,35857764,35857824,35857834,35857843,35857904,35857913,35857922,35857984,35857993,35858063,35858073,35858082,35858143,35858152,35858161,35858222,35858231,35858240,35858302,35858312,35858322,35858385,35858393,35858401,35858410,35858470,35858479,35858489,35858549,35858559,35858569,35858629,35858639,35858648,35858710,35858719,35858729,35858789,35858798,35858807,35858868,35858877,35858886,35858947,35858956,35858966,35859027,35859037,35859046,35859107,35859116,35859126,35859187,35859196,35859206,35859268,35859277,35859287,35859348,35859357,35859366,35859428,35859437,35859447,35859508,35859517,35859527,35859589,35859600,35859609,35859670,35859679,35859689,35859750,35859759,35859768,35859829,35859838,35859848,35859909,35859918,35859928,35859988,35859998,35860007,35860069,35860079,35860088,35860148,35860159,35860168,35860229,35860238,35860247,35860308,35860317,35860327,35860388,35860397,35860407,35860468,35860478,35860487,35860548,35860557,35860566,35860627,35860636,35860645,35860706,35860715,35860786,35860795,35860804,35860842,35860874,35860884,35860955,35860964,35860986,35861034,35861044,35861064,35861114,35861123,35861137,35861194,35861203,35861219,35861275,35861284,35861297,35861354,35861364,35861377,35861434,35861444,35861456,35861514,35861524,35861537,35861594,35861603,35861619,35861674,35861692,35861754,35861777,35861835,35861845,35861858,35861915,35861924,35861942,35861999,35862010,35862072,35862081,35862091,35862152,35862162,35862232,35862241,35862250,35862311,35862321,35862331,35862391,35862400,35862410,35862471,35862482,35862492,35862554,35862564,35862573,35862636,35862646,35862655,35862716}');

    select cl.parent_order_id,
           min(create_date_id) as create_date_id, --??
           min(exec_id)        as min_exec_id,
           max(exec_id)        as max_exec_id
--     select *
    from dwh.execution ex
             join dwh.client_order cl on cl.order_id = ex.order_id and cl.create_date_id = :l_date_id
    where exec_date_id = :l_date_id
                and ex.exec_type = 'F'
          and ex.is_busted = 'N'
--       and case when :in_dataset_ids is null then true else ex.dataset_id = any (:in_dataset_ids) end
      and case when :in_parent_order_ids is null then true else cl.parent_order_id = any(:in_parent_order_ids) end
      and not is_parent_level
      and cl.parent_order_id is not null
    group by cl.parent_order_id;


select *
from data_marts.load_parent_order_inc2(in_date_id := 20240308,
                                       in_parent_order_ids := '{284721580}',
                                       in_dataset_ids := '{}');
select *
from data_marts.load_parent_order_inc2(in_date_id := 20240308, in_parent_order_ids := '{284721580}',
                                       in_dataset_ids := '{35862726,35862735,35862796,35862805,35862815,35862876,35862885,35862895,35862955,35862965,35862975,35863035,35863045,35863054,35863115,35863125,35863134,35863197,35863206,35863214,35863274,35863283,35863292,35863353,35863362,35863371,35863383,35863441,35863450,35863459,35863520,35863529,35863539,35863600,35863609,35863619,35863679,35863688,35863698,35863758,35863768,35863838,35863857,35863918,35863927,35863936,35863997,35864006,35864017,35864078,35864087,35864097,35864158,35864178,35864239,35864248,35864258,35864320,35864330,35864339,35864400,35864409,35864418,35864479,35864489,35864498,35864559,35864568,35864578,35864639,35864648,35864657,35864718,35864728,35864737,35864798,35864808,35864817,35864878,35864887,35864896,35864958,35864976,35865036,35865046,35865054,35865115,35865124,35865133,35865196,35865205,35865215,35865285,35865295,35865356,35865365,35865375,35865436,35865446,35865455,35865516,35865526,35865535,35865597,35865607,35865616,35865677,35865686,35865696,35865757,35865767,35865776,35865838,35865847,35865856,35865917,35865926,35865935,35865995,35866005,35866015,35866050,35866086,35866095,35866110,35866165,35866174,35866182,35866243,35866252,35866322,35866332,35866342,35866402,35866412,35866421,35866482,35866492,35866501,35866566,35866575,35866585,35866646,35866655,35866664,35866725,35866735,35866744,35866805,35866814,35866885,35866895,35866904,35866966,35866976,35866985,35867047,35867056,35867065,35867126,35867136,35867145,35867207,35867217,35867233,35867287,35867297,35867310,35867368,35867378,35867402,35867448,35867457,35867472,35867527,35867536,35867545,35867606,35867615,35867625,35867685,35867695,35867705,35867767,35867777,35867790,35867847,35867856,35867872,35867927,35867936,35867953,35867962,35867970,35867978,35867993,35868002,35868012,35868027,35868036,35868046,35868061,35868071,35868081,35868096,35868105,35868114,35868129,35868139,35868148,35868163,35868172,35868182,35868196,35868206,35868215,35868231,35868239,35868249,35868264,35868273,35868283,35868298,35868307,35868317,35868332,35868341,35868351,35868366,35868375,35868399,35868409,35868418,35868433,35868443,35868452,35868467,35868477,35868486,35868501,35868510,35868520,35868535,35868544,35868554,35868569,35868578,35868588,35868604,35868614,35868623,35868638,35868648,35868657,35868672,35868682,35868691,35868706,35868716,35868725,35868740,35868749,35868758,35868773,35868782,35868791,35868807,35868816,35868825,35868840,35868850,35868859,35868874,35868883,35868893,35868908,35868917,35868926,35868942,35868951,35868960,35868979,35868990,35868999,35869014,35869033,35869048,35869057,35869067,35869082,35869091,35869101,35869115,35869125,35869135,35869150,35869159,35869169,35869183,35869192,35869202,35869217,35869226,35869237,35869251,35869260,35869268,35869285,35869294,35869304,35869319,35869329,35869338,35869353,35869362,35869372,35869387,35869396,35869406,35869421,35869430,35869440,35869455,35869464,35869473,35869488,35869498,35869508,35869523,35869532,35869541,35869556,35869565,35869575,35869589,35869598,35869607,35869622,35869631,35869641,35869656,35869666,35869675,35869690,35869699,35869708,35869724,35869733,35869743,35869758,35869767,35869778,35869793,35869802,35869812,35869827,35869836,35869845,35869860,35869870,35869879,35869894,35869913,35869928,35869937,35869946,35869962,35869971,35869980,35869996,35870005,35870029,35870038,35870048,35870063,35870072,35870081,35870097,35870106,35870115,35870130,35870139,35870148,35870163,35870173,35870182,35870197,35870206,35870215,35870230,35870240,35870249,35870264,35870273,35870282,35870297,35870307,35870316,35870331,35870340,35870350,35870366,35870375,35870385,35870409,35870419,35870434,35870443,35870453,35870468,35870477,35870486,35870501,35870510,35870520,35870535,35870545,35870554,35870570,35870579,35870588,35870603,35870613,35870623,35870638,35870648,35870657,35870672,35870682,35870692,35870706,35870715,35870725,35870741,35870750,35870760,35870776,35870785,35870796,35870811,35870820,35870829,35870844,35870853,35870863,35870877,35870887,35870896,35870911,35870920,35870929,35870944,35870953,35870963,35870978,35870988,35870997,35871012,35871022,35871031,35871047,35871056,35871066,35871081,35871090,35871101,35871117,35871126,35871135,35871150,35871160,35871170,35871185,35871194,35871204,35871219,35871229,35871238,35871252,35871262,35871272,35871288,35871299,35871314,35871324,35871333,35871349,35871358,35871368,35871383,35871392,35871402,35871417,35871427,35871436,35871452,35871462,35871471,35871487,35871496,35871505,35871521,35871530,35871540,35871555,35871565,35871574,35871589,35871598,35871608,35871623,35871632,35871642,35871657,35871667,35871677,35871692,35871702,35871712,35871727,35871737,35871747,35871763,35871772,35871785,35871796,35871806,35871822,35871832,35871841,35871857,35871866,35871876,35871891,35871900,35871910,35871925,35871934,35871944,35871959,35871968,35871993,35872003,35872012,35872028,35872037,35872045,35872060,35872069,35872078,35872087,35872102,35872112,35872125,35872136,35872146,35872159,35872171,35872182,35872199,35872208,35872218,35872233,35872242,35872252,35872266,35872275,35872285,35872309,35872318,35872334,35872343,35872352,35872368,35872377,35872387,35872402,35872410,35872420,35872435,35872445,35872455,35872470,35872479,35872504,35872513,35872523,35872538,35872548,35872556,35872572,35872582,35872591,35872606,35872616,35872625,35872641,35872649,35872659,35872674}');
select *
from data_marts.load_parent_order_inc2(in_date_id := 20240320, in_parent_order_ids := '{285222916}',
                                       in_dataset_ids := '{}');


select fmj.message_type, count(*) from dwh.client_order ex
join fix_capture.fix_message_json fmj on fmj.fix_message_id = ex.fix_message_id and create_date_id = fmj.date_id
where ex.create_date_id = 20240315
and ex.parent_order_id is not null
group by fmj.message_type

select * from dwh.d_exec_type


select *
from data_marts.load_parent_order_inc3(in_date_id := 20240320, in_parent_order_ids := '{285227584}', in_dataset_ids := '{36479955}')


select *
-- delete
from data_marts.f_parent_order
where status_date_id = 20240325
and parent_order_id = 285227634;

select ex.exec_type, ex.dataset_id, ex.order_id, ex.exec_id, ex.last_qty, ex.last_px, ex.last_qty * ex.last_px, order_qty, *
from dwh.client_order cl
join dwh.execution ex on ex.order_id = cl.order_id and ex.exec_date_id = cl.create_date_id
and cl.create_date_id = 20240322
and cl.parent_order_id is not null
and cl.parent_order_id = 285415168
and ex.exec_type in ('0', 'F', 'W')
order by ex.dataset_id, ex.exec_id;



select count(distinct case when ex.exec_type in ('0', 'W') then ex.order_id end)    as street_count,
       count(case when ex.exec_type = 'F' then 1 end)                               as trade_count,
       sum(case when ex.exec_type = 'F' then ex.last_qty else 0 end)                as last_qty,
       sum(case when ex.exec_type = 'F' then ex.last_qty * ex.last_px else 0 end)   as amount,
       sum(case when ex.exec_type in ('0', 'W') then ex.order_qty else 0 end)::int4 as street_order_qty
from (select distinct on (ex.order_id, ex.exec_type) cl.order_id,
                                                     cl.order_qty,
                                                     ex.exec_type,
                                                     ex.last_qty,
                                                     ex.last_px
      from dwh.execution ex
               join dwh.client_order cl on cl.order_id = ex.order_id and cl.create_date_id = :in_date_id
      where ex.exec_date_id = :in_date_id
        and cl.parent_order_id = :in_parent_order_id
        and ex.exec_id between :in_min_exec_id and :in_max_exec_id
        and ex.exec_type in ('F', '0', 'W')
        and cl.trans_type <> 'F'
        and ex.is_busted = 'N') ex



select *
from data_marts.get_exec_for_parent_order(in_parent_order_id := 285227584,
                                          in_date_id := 20240320,
                                          in_min_exec_id := 846796570,
                                          in_max_exec_id := 846796591)


select * from data_marts.f_yield_capture
where parent_order_id = 285227634
and status_date_id = 20240320;

create view data_marts.v_mon_dash_trade as
select --tf.trading_firm_name
       x.trading_firm_unq_id,
       x.account_ID,
       sum(case when instrument_type_id = 'E' then noorderssent else 0 end)     eq_no_orders_sent,
       sum(case when instrument_type_id = 'E' then qtyopentobuy else 0 end)     eq_qty_open_to_buy,
       sum(case when instrument_type_id = 'E' then qtybought else 0 end)        eq_qty_bought,
       sum(case when instrument_type_id = 'E' then qtyopentosell else 0 end)    eq_qty_open_to_sell,
       sum(case when instrument_type_id = 'E' then qtysold else 0 end)          eq_qty_sold,
       sum(case when instrument_type_id = 'E' then streetorderssent else 0 end) eq_street_qty,
       sum(case when instrument_type_id = 'O' then noorderssent else 0 end)     opt_no_orders_sent,
       sum(case when instrument_type_id = 'O' then qtyopentobuy else 0 end)     opt_qty_open_to_buy,
       sum(case when instrument_type_id = 'O' then qtybought else 0 end)        opt_qty_bought,
       sum(case when instrument_type_id = 'O' then qtyopentosell else 0 end)    opt_qty_open_to_sell,
       sum(case when instrument_type_id = 'O' then qtysold else 0 end)          opt_qty_sold,
       sum(case when instrument_type_id = 'O' then streetorderssent else 0 end) opt_street_qty,
       max(last_trade_time) as                                                  last_trade_time
FROM (select account_id,
             instrument_type_id,
             trading_firm_unq_id,
             count(1)                                                as noorderssent,
             sum(case when side = '1' then t.leaves_qty else 0 end)  as qtyopentobuy,
             sum(case when side = '1' then t.last_qty else 0 end)    as qtybought,
             ---
             sum(case when side <> '1' then t.leaves_qty else 0 end) as qtyopentosell,
             sum(case when side <> '1' then t.last_qty else 0 end)   as qtysold,
             sum(t.street_count)                                     as streetorderssent,
             max(coalesce(t.pg_db_update_time, t.pg_db_create_time)) as last_trade_time
      from (select *
            from data_marts.f_parent_order
            where status_date_id = to_char(current_date, 'YYYYMMDD')::int
                  ) t
      group by t.account_id,
               t.instrument_type_id,
               t.trading_firm_unq_id) x
group by x.trading_firm_unq_id,
         x.account_id



select *
from data_marts.f_parent_order
where status_date_id = 20240404
and leaves_qty is not null


select * from data_marts.run_f_parent_order_process();

select * from data_marts.get_exec_for_parent_order(286081164, 20240402,)

-----------------------------------------------------------------------------------------------------------------------

select * from data_marts.f_parent_order
where parent_order_id = 286126275;

select ex.exec_type, exec_date_id, ex.exec_id, ex.leaves_qty, * from dwh.client_order cl
         join dwh.execution ex on ex.order_id = cl.order_id and ex.exec_date_id >= cl.create_date_id
where parent_order_id = 286080584;

select * from data_marts.load_parent_order_inc3(in_date_id := 20240401), in_dataset_ids := '{37112338}');
select * from data_marts.load_parent_order_inc3(in_date_id := 20240402, in_parent_order_ids := '{286080581,286080582,286080583,286080584,286080585}');


    create temp table t_base as
    select cl.parent_order_id,
           min(par.create_date_id)      as create_date_id,
           min(exec_id)                 as min_exec_id,
           max(exec_id)                 as max_exec_id,
           min(par.time_in_force_id)    as time_in_force_id,
           min(par.account_id)          as account_id,
           min(par.instrument_id)       as instrument_id,
           min(par.instrument_type_id)  as instrument_type_id,
           min(par.trading_firm_unq_id) as trading_firm_unq_id,
           min(par.order_qty)           as parent_order_qty,
           min(par.side)                as side
    from dwh.execution ex
             join dwh.client_order cl on cl.order_id = ex.order_id and cl.create_date_id = ex.order_create_date_id
             join lateral (select par.create_date_id,
                                  par.time_in_force_id,
                                  par.account_id,
                                  par.instrument_id,
                                  di.instrument_type_id,
                                  par.trading_firm_unq_id,
                                  par.order_qty,
                                  par.side
                           from dwh.client_order par
                                    join dwh.d_instrument di on di.instrument_id = par.instrument_id and di.is_active
                           where par.order_id = cl.parent_order_id
                           limit 1) par on true
    where exec_date_id = :l_date_id
      and case when :in_dataset_ids is null then true else ex.dataset_id = any (:in_dataset_ids) end
      and case when :in_parent_order_ids is null then true else cl.parent_order_id = any (:in_parent_order_ids) end
      and not is_parent_level
      and ex.exec_type in ('F', '0', 'W')
      and cl.parent_order_id is not null
    group by cl.parent_order_id;

select * from t_base;

create temp table t_parent_orders as
    select bs.*,
           val.*,
           nup.need_update
    from t_base bs
             join lateral (select true as need_update) nup on true
             join lateral (select street_count, trade_count, last_qty, amount, street_order_qty, leaves_qty
                           from data_marts.get_exec_for_parent_order(in_parent_order_id := bs.parent_order_id,
                                                                     in_date_id := :l_date_id,
                                                                     in_min_exec_id := case when nup.need_update then 0 else bs.min_exec_id end,
                                                                     in_max_exec_id := bs.max_exec_id
                                )
                           limit 1) val on true;


select * from data_marts.get_exec_for_parent_order(in_parent_order_id := 286080581, in_date_id := 20240402, in_min_exec_id := 0, in_max_exec_id := 849515393000);

select count(distinct order_id)    as street_count,
               count(case when ex.exec_type = 'F' then 1 end)                               as trade_count,
               sum(case when ex.exec_type = 'F' then ex.last_qty else 0 end)                as last_qty,
               sum(case when ex.exec_type = 'F' then ex.last_qty * ex.last_px else 0 end)   as amount,
               sum(case when ex.exec_type in ('0', 'W') then ex.order_qty else 0 end)::int4 as street_order_qty,
               coalesce(min(case when ex.exec_type = 'F' then ex.leaves_qty end), 0)              as leaves_qty
        from (select --distinct on (ex.order_id, ex.exec_id)

                  cl.create_date_id,
                  cl.order_id,
                  ex.exec_id,
                                                             cl.order_qty,
                                                             ex.exec_type,
                                                             ex.last_qty,
                                                             ex.last_px,
                                                             ex.leaves_qty
              from dwh.execution ex
                       join dwh.client_order cl on cl.order_id = ex.order_id and cl.create_date_id = ex.order_create_date_id
                           where ex.exec_date_id = :in_date_id
                and cl.parent_order_id = :in_parent_order_id
                and ex.exec_id between :in_min_exec_id and :in_max_exec_id
                and ex.exec_type in ('F', '0', 'W', '4')
                and cl.trans_type <> 'F'
                and ex.is_busted = 'N'
                           order by ex.exec_id
                           ) ex;


select par.order_id, ex.last_qty--, pex.*
from dwh.client_order par
         join dwh.client_order cl on cl.parent_order_id = par.order_id
         join dwh.execution ex on ex.order_id = cl.order_id and ex.order_create_date_id = cl.create_date_id

where par.order_id = :in_parent_order_id
  and par.create_date_id = :l_date_id
  and ex.exec_type in ('F', '4')
and ex.exec_id between :in_min_exec_id and :in_max_exec_id;

select exec_id, leaves_qty, ex.last_qty, exec_type, * from dwh.client_order cl
join dwh.execution ex on ex.order_id = cl.order_id
where cl.order_id = :in_parent_order_id



select * from data_marts.v_mon_dash_trade;

 select * from data_marts.f_parent_order;



select cl.parent_order_id,
           min(par.create_date_id)      as create_date_id,
           min(exec_id)                 as min_exec_id,
           max(exec_id)                 as max_exec_id,
           min(par.time_in_force_id)    as time_in_force_id,
           min(par.account_id)          as account_id,
           min(par.instrument_id)       as instrument_id,
           min(par.instrument_type_id)  as instrument_type_id,
           min(par.trading_firm_unq_id) as trading_firm_unq_id,
           min(par.order_qty)           as parent_order_qty,
           min(par.side)                as side
--            min(par.leaves_qty)
    from dwh.execution ex
             join dwh.client_order cl on cl.order_id = ex.order_id and cl.create_date_id = ex.order_create_date_id
             join lateral (select par.create_date_id,
                                  par.time_in_force_id,
                                  par.account_id,
                                  par.instrument_id,
                                  di.instrument_type_id,
                                  par.trading_firm_unq_id,
                                  par.order_qty,
                                  par.side
--                                   epar.leaves_qty
                           from dwh.client_order par
                                    join dwh.d_instrument di on di.instrument_id = par.instrument_id and di.is_active
--                                     left join lateral (select leaves_qty
--                                                        from dwh.execution ep
--                                                        where ep.order_id = par.order_id
--                                                          and ep.exec_date_id = :l_date_id
--                                                        order by ep.exec_time desc
--                                                        limit 1) epar on true
                           where par.order_id = cl.parent_order_id
                           limit 1) par on true
    where exec_date_id = :l_date_id
      and not is_parent_level
      and ex.exec_type in ('F', '0', 'W')
      and cl.parent_order_id is not null
    group by cl.parent_order_id;



select cl.parent_order_id,
       min(ex.exec_id) as min_exec_id,
       max(ex.exec_id) as max_exec_id
from dwh.execution ex
         join dwh.client_order cl on cl.order_id = ex.order_id and cl.create_date_id = ex.order_create_date_id
where ex.exec_date_id = 20240404
--                          and ex.order_id = cl.order_id
--                          and ex.order_create_date_id = cl.create_date_id
group by cl.parent_order_id

select *
from dwh.client_order cl
         join lateral (
                       limit 1) ex on true
group by cl.parent_order_id



create function data_marts.load_parent_order_inc4(in_parent_order_ids bigint[] DEFAULT NULL::bigint[],
                                                  in_date_id integer DEFAULT NULL::integer,
                                                  in_dataset_ids bigint[] DEFAULT NULL::bigint[]) returns integer
    language plpgsql
as
$$
    -- SO: 20240307 https://dashfinancial.atlassian.net/browse/DS-8065
declare
    l_row_cnt int4;
    l_load_id int8;
    l_step_id int4;
    l_date_id int4 := coalesce(in_date_id, to_char(current_date, 'YYYYMMDD')::int4);

begin

    select nextval('public.load_timing_seq') into l_load_id;
    l_step_id := 1;
    select public.load_log(l_load_id, l_step_id,
                           'load_parent_order_inc for ' || l_date_id::text || ' STARTED ===', 0, 'O')
    into l_step_id;

    --     raise notice '%, %, %', in_parent_order_ids, in_dataset_ids, in_date_id;

    -- the list of orders with permanent attributes
    drop table if exists t_base;
    create temp table t_base as
    select cl.parent_order_id,
           min(exec_id)                 as min_exec_id,
           max(exec_id)                 as max_exec_id
    from dwh.execution ex
             join dwh.client_order cl on cl.order_id = ex.order_id and cl.create_date_id = ex.order_create_date_id
    where exec_date_id = l_date_id
      and case when in_dataset_ids is null then true else ex.dataset_id = any (in_dataset_ids) end
      and case when in_parent_order_ids is null then true else cl.parent_order_id = any (in_parent_order_ids) end
      and not is_parent_level
      and ex.exec_type in ('F', '0', 'W')
      and cl.parent_order_id is not null
    group by cl.parent_order_id;

    get diagnostics l_row_cnt = row_count;
    raise notice 't_base - %', l_row_cnt;


     create temp table t_base_ext as
    select cl.parent_order_id,
           min(par.create_date_id)      as create_date_id,
           min_exec_id                as min_exec_id,
           max_exec_id                as max_exec_id,
           min(par.time_in_force_id)    as time_in_force_id,
           min(par.account_id)          as account_id,
           min(par.instrument_id)       as instrument_id,
           min(par.instrument_type_id)  as instrument_type_id,
           min(par.trading_firm_unq_id) as trading_firm_unq_id,
           min(par.order_qty)           as parent_order_qty,
           min(par.side)                as side
    from t_base ex
             join lateral (select par.create_date_id,
                                  par.time_in_force_id,
                                  par.account_id,
                                  par.instrument_id,
                                  di.instrument_type_id,
                                  par.trading_firm_unq_id,
                                  par.order_qty,
                                  par.side
                           from dwh.client_order par
                                    join dwh.d_instrument di on di.instrument_id = par.instrument_id and di.is_active
                           where par.order_id = cl.parent_order_id
                           limit 1) par on true
    where exec_date_id = :l_date_id
      and case when :in_dataset_ids is null then true else ex.dataset_id = any (:in_dataset_ids) end
      and case when :in_parent_order_ids is null then true else cl.parent_order_id = any (:in_parent_order_ids) end
      and not is_parent_level
      and ex.exec_type in ('F', '0', 'W')
      and cl.parent_order_id is not null
    group by cl.parent_order_id;

    -- new groupped by parent_order
    drop table if exists t_parent_orders;
    create temp table t_parent_orders as
    select bs.*,
           val.*,
           nup.need_update
    from t_base bs
             --              join lateral ( select case
--                                        when exists (select null
--                                                     from data_marts.f_parent_order fp
--                                                     where fp.status_date_id = l_date_id
--                                                       and fp.parent_order_id = bs.parent_order_id
--                                                       and fp.last_exec_id > bs.min_exec_id)
--                                            then true
--                                        else false end as need_update
--         ) nup on true
             join lateral (select true as need_update) nup on true
             join lateral (select street_count, trade_count, last_qty, amount, street_order_qty
                           from data_marts.get_exec_for_parent_order(in_parent_order_id := bs.parent_order_id,
                                                                     in_date_id := l_date_id,
                                                                     in_min_exec_id := case when nup.need_update then 0 else bs.min_exec_id end,
                                                                     in_max_exec_id := bs.max_exec_id
                                )
                           limit 1) val on true;

    get diagnostics l_row_cnt = row_count;
    raise notice 't_street_orders create - %', l_row_cnt;
    create index on t_parent_orders (parent_order_id);

    insert into data_marts.f_parent_order (parent_order_id, last_exec_id, create_date_id, status_date_id,
                                           street_count, trade_count, last_qty, amount, street_order_qty,
                                           leaves_qty,
                                           pg_db_create_time,
                                           order_qty,
                                           time_in_force_id, account_id, trading_firm_unq_id, instrument_id,
                                           instrument_type_id, side)
    select tp.parent_order_id,
           tp.max_exec_id,
           tp.create_date_id,
           l_date_id,
           case when tp.need_update then tp.street_count else tp.street_count + coalesce(fp.street_count, 0) end,
           case when tp.need_update then tp.trade_count else tp.trade_count + coalesce(fp.trade_count, 0) end,
           case when tp.need_update then tp.last_qty else tp.last_qty + coalesce(fp.last_qty, 0) end,
           case when tp.need_update then tp.amount else tp.amount + coalesce(fp.amount, 0) end,
           case when tp.need_update then tp.street_order_qty else tp.amount + coalesce(fp.street_order_qty, 0) end,
           case when tp.need_update then tp.leaves_qty else tp.leaves_qty + coalesce(fp.leaves_qty, 0) end,
           clock_timestamp(),
           --
           tp.parent_order_qty,
           tp.time_in_force_id,
           tp.account_id,
           tp.trading_firm_unq_id,
           tp.instrument_id,
           tp.instrument_type_id,
           tp.side
    from t_parent_orders tp
             left join data_marts.f_parent_order fp
                       on fp.parent_order_id = tp.parent_order_id and fp.status_date_id = l_date_id
    on conflict (status_date_id, parent_order_id) do update
        set last_exec_id      = excluded.last_exec_id,
            street_count      = excluded.street_count,
            trade_count       = excluded.trade_count,
            last_qty          = excluded.last_qty,
            amount            = excluded.amount,
            street_order_qty  = excluded.street_order_qty,
            pg_db_update_time = clock_timestamp()
--     and hash ???
    ;

    get diagnostics l_row_cnt = row_count;
    raise notice 't_parent_orders insert - %', l_row_cnt;

    select nextval('public.load_timing_seq') into l_load_id;
    l_step_id := 1;
    select public.load_log(l_load_id, l_step_id,
                           'load_parent_order_inc for ' || l_date_id::text || ' FINISHED ===', l_row_cnt, 'E')
    into l_step_id;

    return l_row_cnt;
end;
$$;
